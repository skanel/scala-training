/* EX 0 */
val x = 0
def f(y: Int) = y + 1
val result = {
  val x = f(3)
  x * x
}
output:
---------------------

val x = 0
def f(y: Int) = y + 1
val result = {
  val x = f(3)
  x * x
}+4
output:
----------------------------
/* Ex1 & Ex2*/
def product(f: Int => Int)(a: Int, b: Int): Int =
  if (a > b) 1
  else f(a) * product(f)(a + 1, b)

product(x => x * x)(3, 4) //output = ???


def fact(n: Int) = product(x => x)(1, n)
fact(5)     // product(x => x)(1, 5) //ouput
--------------------------------

/* Ex3 */
def mapReduce(f: Int => Int, combine: (Int, Int) => Int, zero: Int): Int =
  if (a > b) zero
  else combine(f(a), mapReduce(f, combine, zero)(a + 1, b))

def product(f: Int => Int)(a: Int, b: Int): Int = mapReduce(f, (x, y) => x * y, 1)(a, b)

product(x => x * x)(3, 4)    // mapReduce(x => x * x, (x, y) => x * y, 1)(3, 4)

---------------------------------------------------------